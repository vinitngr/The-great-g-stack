#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# --- Configuration Variables ---
PROJECT_NAME="my-saas-project" # Your project name
NODE_VERSION="20"              # Recommended Node.js LTS version for latest compatibility
PNPM_VERSION="latest"          # Specify pnpm version if needed, 'latest' is usually fine

# --- Helper Functions ---

echo_info() {
  echo -e "\n\033[0;34m[INFO]\033[0m $1"
}

echo_success() {
  echo -e "\n\033[0;32m[SUCCESS]\033[0m $1"
}

echo_warning() {
  echo -e "\n\033[0;33m[WARNING]\033[0m $1"
}

echo_error() {
  echo -e "\n\033[0;31m[ERROR]\033[0m $1"
  exit 1
}

check_command() {
  if ! command -v "$1" &> /dev/null; then
    echo_error "$1 is not installed. Please install it to continue."
  fi
}

# --- Pre-requisites Check ---
echo_info "Checking for required tools..."
check_command "git"
check_command "docker"
check_command "node"
check_command "npm" # npm is usually bundled with Node.js

# Ensure Node.js version is compatible (optional, but good practice)
CURRENT_NODE_VERSION=$(node -v | sed 's/v//' | cut -d'.' -f1)
if (( CURRENT_NODE_VERSION < NODE_VERSION )); then
  echo_warning "Node.js version is $CURRENT_NODE_VERSION. Recommended is v$NODE_VERSION or higher. Please consider upgrading."
fi

# --- Install pnpm ---
echo_info "Installing or updating pnpm..."
if ! command -v pnpm &> /dev/null; then
  npm install -g pnpm@${PNPM_VERSION}
  echo_success "pnpm installed."
else
  echo_info "pnpm is already installed. Ensuring it's up to date."
  pnpm add -g pnpm@${PNPM_VERSION}
  echo_success "pnpm updated."
fi

# --- Create Project Directory and Initialize Monorepo ---
echo_info "Creating project directory: $PROJECT_NAME"
if [ -d "$PROJECT_NAME" ]; then
  echo_warning "Directory '$PROJECT_NAME' already exists. Skipping directory creation."
  cd "$PROJECT_NAME" || echo_error "Failed to change directory to $PROJECT_NAME."
else
  mkdir "$PROJECT_NAME"
  cd "$PROJECT_NAME" || echo_error "Failed to change directory to $PROJECT_NAME."
  echo_info "Initializing Turborepo project..."
  pnpm dlx create-turbo@latest --path .
  echo_success "Turborepo initialized."
fi

# --- Set up .gitignore ---
echo_info "Setting up .gitignore..."
cat << EOF > .gitignore
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

# Diagnostic reports (https://nodejs.org/api/report.html)
.report.[0-9]*.[0-9]*.[0-9]*.[0-9]*.json

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like istanbul
coverage
.nyc_output

# Grunt intermediate storage (http://gruntjs.com/configuring-tasks#tmp-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# node-waf configuration
.lock-wscript

# Compiled binary addons (http://nodejs.org/api/addons.html)
build/Release

# Dependency directories
node_modules/
jspm_packages/

# TypeScript v1.8+ compiled files
*.js
*.d.ts

# Optional npm cache directory
.npm

# Optional REPL history
.node_repl_history

# output of 'npm pack'
*.tgz

# dotenv environment variables file
.env
.env.local
.env.development.local
.env.test.local
.env.production.local

# parcel-bundler cache (https://parceljs.org/)
.cache

# next.js build output
.next
out

# nuxt.js build / generate output
.nuxt
dist

# sveltekit build output
.svelte-kit

# webpack build output
dist

# electron build output
.electron-builder
electron-builder-debug.log

# Mac files
.DS_Store
.AppleDouble
.LSOverride

# Thumbnails
._*

# Saved application state
.DocumentRevisions-V100
.fseventsd
.Spotlight-V100
.TemporaryItems
.Trashes
.VolumeIcon.icns
.com.apple.timemachine.donotbackup

# Windows files
Thumbs.db
ehthumbs.db
Desktop.ini

# VS Code
.vscode/

# Docusaurus build output
build/

# DrizzleKit migrations
drizzle/migrations

EOF
echo_success ".gitignore created."

# --- Initialize Git ---
echo_info "Initializing Git repository..."
git init
git add .
git commit -m "feat: Initial Turborepo setup and .gitignore"
echo_success "Git repository initialized."

# --- Create Boilerplate Files and Directories ---

echo_info "Setting up apps and packages structure..."
pnpm turbo gen apps/server --template=pnpm-package --cwd .
pnpm turbo gen apps/web --template=pnpm-package --cwd .
pnpm turbo gen packages/authbuilder --template=pnpm-package --cwd .
pnpm turbo gen packages/ui --template=pnpm-package --cwd .

# --- Configure apps/server (Node.js with Express) ---
echo_info "Configuring apps/server (Node.js with Express, Drizzle, Vitest)..."
cd apps/server
pnpm add express cors dotenv zod @types/express @types/cors @types/node typescript ts-node-dev
pnpm add -D vitest @vitest/coverage-v8 @faker-js/faker
pnpm add drizzle-orm pg drizzle-kit
mkdir -p src src/routes src/db src/tests
touch src/index.ts src/routes/index.ts src/db/index.ts src/db/schema.ts src/tests/example.test.ts drizzle.config.ts tsconfig.json vitest.config.ts .env.example

# Populate apps/server/src/index.ts
cat << EOF > src/index.ts
import express from 'express';
import cors from 'cors';
import dotenv from 'dotenv';
import { connectDb } from './db';
import { userRoutes } from './routes';

dotenv.config();

const app = express();
const PORT = process.env.PORT || 4000;

// Middleware
app.use(cors());
app.use(express.json());

// Connect to Database
connectDb();

// Routes
app.get('/', (req, res) => {
  res.send('SaaS Backend API is running!');
});

app.use('/api/users', userRoutes);
// Add more routes here

// Global error handler (basic example)
app.use((err: any, req: any, res: any, next: any) => {
  console.error(err.stack);
  res.status(500).send('Something broke!');
});


app.listen(PORT, () => {
  console.log(\`Server listening on port \${PORT}\`);
});
EOF

# Populate apps/server/src/routes/index.ts
cat << EOF > src/routes/index.ts
import { Router } from 'express';

const router = Router();

router.get('/', (req, res) => {
  res.json({ message: 'User routes are working!' });
});

router.post('/', (req, res) => {
  res.json({ message: 'Create user endpoint', body: req.body });
});

// Example: Get user by ID
router.get('/:id', (req, res) => {
  const userId = req.params.id;
  res.json({ message: \`Get user with ID: \${userId}\` });
});


export { router as userRoutes };
EOF

# Populate apps/server/src/db/index.ts (Drizzle DB connection)
cat << EOF > src/db/index.ts
import { drizzle } from 'drizzle-orm/node-postgres';
import { Pool } from 'pg';
import * as schema from './schema';
import dotenv from 'dotenv';

dotenv.config();

const pool = new Pool({
  connectionString: process.env.DATABASE_URL,
});

export const db = drizzle(pool, { schema });

export async function connectDb() {
  try {
    await pool.connect();
    console.log('PostgreSQL connected successfully!');
  } catch (err) {
    console.error('Error connecting to PostgreSQL', err);
    process.exit(1); // Exit process with failure
  }
}
EOF

# Populate apps/server/src/db/schema.ts (Drizzle Schema)
cat << EOF > src/db/schema.ts
import { pgTable, serial, text, timestamp, boolean } from 'drizzle-orm/pg-core';

export const users = pgTable('users', {
  id: serial('id').primaryKey(),
  email: text('email').unique().notNull(),
  name: text('name'),
  passwordHash: text('password_hash').notNull(),
  isVerified: boolean('is_verified').default(false).notNull(),
  createdAt: timestamp('created_at').defaultNow().notNull(),
  updatedAt: timestamp('updated_at').defaultNow().notNull(),
});

export const products = pgTable('products', {
  id: serial('id').primaryKey(),
  name: text('name').notNull(),
  description: text('description'),
  price: text('price').notNull(), // Using text for price to avoid float issues, store as cents or use decimal
  createdAt: timestamp('created_at').defaultNow().notNull(),
  updatedAt: timestamp('updated_at').defaultNow().notNull(),
});

// Add more schemas as needed, e.g., organizations, subscriptions, etc.
EOF

# Populate apps/server/drizzle.config.ts
cat << EOF > drizzle.config.ts
import { defineConfig } from 'drizzle-kit';
import dotenv from 'dotenv';

dotenv.config({ path: '.env' });

export default defineConfig({
  schema: './src/db/schema.ts',
  out: './drizzle',
  dialect: 'postgresql',
  dbCredentials: {
    url: process.env.DATABASE_URL!,
  },
  verbose: true,
  strict: true,
});
EOF

# Populate apps/server/tsconfig.json
cat << EOF > tsconfig.json
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist",
    "rootDir": "src",
    "baseUrl": ".",
    "paths": {
      "*": ["src/*"]
    }
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules", "dist"]
}
EOF

# Populate apps/server/vitest.config.ts
cat << EOF > vitest.config.ts
import { defineConfig } from 'vitest/config';

export default defineConfig({
  test: {
    globals: true,
    environment: 'node',
    coverage: {
      provider: 'v8',
      reporter: ['text', 'json', 'html'],
      include: ['src/**/*.ts'],
      exclude: ['src/db/**'], // Exclude DB config from coverage
    },
  },
});
EOF

# Populate apps/server/src/tests/example.test.ts
cat << EOF > src/tests/example.test.ts
import { describe, it, expect } from 'vitest';
import { faker } from '@faker-js/faker';

describe('Example Test Suite', () => {
  it('should generate a random email', () => {
    const email = faker.internet.email();
    expect(email).toContain('@');
    expect(email).toContain('.');
  });

  it('should add two numbers correctly', () => {
    expect(1 + 1).toBe(2);
  });
});
EOF


# Populate apps/server/.env.example
cat << EOF > .env.example
PORT=4000
DATABASE_URL="postgresql://user:password@localhost:5432/mydatabase"
REDIS_URL="redis://localhost:6379"
# Add your secret keys here
JWT_SECRET="your_jwt_secret_key"
EOF

echo_success "apps/server configured."
cd ../.. # Go back to root

# --- Configure apps/web (Next.js with Shadcn UI) ---
echo_info "Configuring apps/web (Next.js with Shadcn UI)..."
cd apps/web
pnpm add next react react-dom
pnpm add -D typescript @types/react @types/node postcss tailwindcss autoprefixer @radix-ui/react-slot class-variance-authority clsx lucide-react react-icons next-themes
pnpm add @vercel/speed-insights @vercel/analytics # Vercel analytics
npx shadcn-ui@latest init <<EOF
y
default
nyc
yes
src/components/ui
utils
tailwind.config.ts
app/globals.css
yes
EOF

# Ensure tsconfig.json extends root and is correctly set up for Next.js
cat << EOF > tsconfig.json
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "plugins": [
      {
        "name": "next"
      }
    ],
    "paths": {
      "@/*": ["./src/*"]
    },
    "jsx": "preserve",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "resolveJsonModule": true,
    "isolatedModules": true
  },
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", ".next/types/**/*.ts"],
  "exclude": ["node_modules"]
}
EOF

# Populate next.config.mjs
cat << EOF > next.config.mjs
/** @type {import('next').NextConfig} */
import million from 'million/compiler';

const nextConfig = {
  transpilePackages: ['@repo/ui', '@repo/authbuilder'],
};

const millionConfig = {
  auto: true, // or process.env.NODE_ENV === 'production'
};

export default million(nextConfig, millionConfig);
EOF

# Populate app/layout.tsx for Shadcn setup
mkdir -p src/app
cat << EOF > src/app/layout.tsx
import type { Metadata } from "next";
import { Inter } from "next/font/google";
import "./globals.css";
import { ThemeProvider } from "@/components/theme-provider";
import { SpeedInsights } from "@vercel/speed-insights/next"
import { Analytics } from "@vercel/analytics/react"

const inter = Inter({ subsets: ["latin"] });

export const metadata: Metadata = {
  title: "My SaaS Project",
  description: "A modern SaaS application built with Next.js and Shadcn UI.",
};

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  return (
    <html lang="en" suppressHydrationWarning>
      <body className={inter.className}>
        <ThemeProvider
          attribute="class"
          defaultTheme="system"
          enableSystem
          disableTransitionOnChange
        >
          {children}
        </ThemeProvider>
        <SpeedInsights />
        <Analytics />
      </body>
    </html>
  );
}
EOF

# Populate src/app/page.tsx
cat << EOF > src/app/page.tsx
import { Button } from "@/components/ui/button";

export default function Home() {
  return (
    <main className="flex min-h-screen flex-col items-center justify-center p-24">
      <h1 className="text-5xl font-bold text-center mb-8">
        Welcome to Your SaaS
      </h1>
      <p className="text-lg text-center mb-8 max-w-2xl">
        This is a boilerplate for a modern SaaS application built with Next.js, Shadcn UI, and Turborepo.
      </p>
      <Button size="lg">Get Started</Button>
    </main>
  );
}
EOF

# Populate src/components/theme-provider.tsx (from Shadcn)
mkdir -p src/components
cat << EOF > src/components/theme-provider.tsx
"use client"

import * as React from "react"
import { ThemeProvider as NextThemesProvider } from "next-themes"
import { type ThemeProviderProps } from "next-themes/dist/types"

export function ThemeProvider({ children, ...props }: ThemeProviderProps) {
  return <NextThemesProvider {...props}>{children}</NextThemesProvider>
}
EOF

# Populate tailwind.config.ts (Shadcn default with slight adjustment)
cat << EOF > tailwind.config.ts
import type { Config } from "tailwindcss"

const config = {
  darkMode: ["class"],
  content: [
    './pages/**/*.{ts,tsx}',
    './components/**/*.{ts,tsx}',
    './app/**/*.{ts,tsx}',
    './src/**/*.{ts,tsx}',
		'../../packages/ui/**/*.{ts,tsx}', # Added for monorepo
  ],
  prefix: "",
  theme: {
    container: {
      center: true,
      padding: "2rem",
      screens: {
        "2xl": "1400px",
      },
    },
    extend: {
      colors: {
        border: "hsl(var(--border))",
        input: "hsl(var(--input))",
        ring: "hsl(var(--ring))",
        background: "hsl(var(--background))",
        foreground: "hsl(var(--foreground))",
        primary: {
          DEFAULT: "hsl(var(--primary))",
          foreground: "hsl(var(--primary-foreground))",
        },
        secondary: {
          DEFAULT: "hsl(var(--secondary))",
          foreground: "hsl(var(--secondary-foreground))",
        },
        destructive: {
          DEFAULT: "hsl(var(--destructive))",
          foreground: "hsl(var(--destructive-foreground))",
        },
        muted: {
          DEFAULT: "hsl(var(--muted))",
          foreground: "hsl(var(--muted-foreground))",
        },
        accent: {
          DEFAULT: "hsl(var(--accent))",
          foreground: "hsl(var(--accent-foreground))",
        },
        popover: {
          DEFAULT: "hsl(var(--popover))",
          foreground: "hsl(var(--popover-foreground))",
        },
        card: {
          DEFAULT: "hsl(var(--card))",
          foreground: "hsl(var(--card-foreground))",
        },
      },
      borderRadius: {
        lg: "var(--radius)",
        md: "calc(var(--radius) - 2px)",
        sm: "calc(var(--radius) - 4px)",
      },
      keyframes: {
        "accordion-down": {
          from: { height: "0" },
          to: { height: "var(--radix-accordion-content-height)" },
        },
        "accordion-up": {
          from: { height: "var(--radix-accordion-content-height)" },
          to: { height: "0" },
        },
      },
      animation: {
        "accordion-down": "accordion-down 0.2s ease-out",
        "accordion-up": "accordion-up 0.2s ease-out",
      },
    },
  },
  plugins: [require("tailwindcss-animate")],
} satisfies Config

export default config
EOF

echo_success "apps/web configured."
cd ../.. # Go back to root

# --- Configure packages/authbuilder ---
echo_info "Configuring packages/authbuilder..."
cd packages/authbuilder
pnpm add -D typescript
mkdir -p src
touch src/index.ts tsconfig.json

# Populate packages/authbuilder/src/index.ts
cat << EOF > src/index.ts
// This is your custom authentication builder package.
// It can contain shared authentication logic, types, utilities, etc.
// Example:
export function generateAuthToken(userId: string): string {
  // In a real app, this would use a robust JWT library
  return \`dummy-jwt-for-user-\${userId}-and-\${Date.now()}\`;
}

export function verifyAuthToken(token: string): { userId: string } | null {
  // In a real app, this would verify a JWT
  if (token.startsWith('dummy-jwt-for-user-')) {
    const userId = token.split('-')[4]; // Naive parsing for example
    return { userId };
  }
  return null;
}

export type UserAuthPayload = {
  userId: string;
  email: string;
  roles: string[];
};

export function buildAuthContext(payload: UserAuthPayload) {
  return {
    isAuthenticated: true,
    user: payload,
    hasRole: (role: string) => payload.roles.includes(role),
  };
}

// Add more auth-related functions/types as needed for your SaaS.
EOF

# Populate packages/authbuilder/tsconfig.json
cat << EOF > tsconfig.json
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist",
    "rootDir": "src",
    "declaration": true
  },
  "include": ["src/**/*.ts"],
  "exclude": ["node_modules", "dist"]
}
EOF

echo_success "packages/authbuilder configured."
cd ../.. # Go back to root

# --- Configure packages/ui (for shared Shadcn components) ---
echo_info "Configuring packages/ui..."
cd packages/ui
pnpm add -D typescript @radix-ui/react-slot class-variance-authority clsx tailwindcss-animate
mkdir -p src/components
touch src/index.ts tsconfig.json components.json

# Populate packages/ui/src/index.ts
cat << EOF > src/index.ts
// Re-export common UI components from shadcn-ui or your custom components here.
// Example:
export * from "./components/button";
// export * from "./components/card";
// export * from "./components/dialog";
// Add more as you create/import them
EOF

# Populate packages/ui/tsconfig.json
cat << EOF > tsconfig.json
{
  "extends": "../../tsconfig.json",
  "compilerOptions": {
    "outDir": "dist",
    "rootDir": "src",
    "declaration": true,
    "jsx": "react-jsx"
  },
  "include": ["src/**/*.ts", "src/**/*.tsx"],
  "exclude": ["node_modules", "dist"]
}
EOF

# Populate packages/ui/components.json (dummy for shadcn to potentially use if moved)
cat << EOF > components.json
{
  "$schema": "https://ui.shadcn.com/schema.json",
  "style": "default",
  "rsc": false,
  "tsx": true,
  "tailwind": {
    "config": "tailwind.config.ts",
    "css": "src/styles.css",
    "baseColor": "slate",
    "cssVariables": true
  },
  "aliases": {
    "components": "@/components",
    "utils": "@/lib/utils"
  }
}
EOF

echo_success "packages/ui configured."
cd ../.. # Go back to root

# --- Configure Docusaurus for Documentation ---
echo_info "Setting up Docusaurus for documentation..."
pnpm dlx create-docusaurus@latest docs classic --typescript --install
cd docs
# Update docusaurus.config.ts for cleaner URL (optional)
sed -i '' 's/baseUrl: '\/'/baseUrl: '\/' + process.env.DOCS_BASE_URL + '\/',/' docusaurus.config.ts || true # For macOS
sed -i 's/baseUrl: '\/'/baseUrl: '\/' + process.env.DOCS_BASE_URL + '\/',/' docusaurus.config.ts || true # For Linux

echo_success "Docusaurus setup complete. See 'docs' folder."
cd .. # Go back to root

# --- Docker & Docker Compose Setup ---
echo_info "Setting up Docker and Docker Compose..."

# Create docker-compose.yml
cat << EOF > docker-compose.yml
version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:16-alpine
    restart: always
    environment:
      POSTGRES_DB: mydatabase
      POSTGRES_USER: user
      POSTGRES_PASSWORD: password
    volumes:
      - db-data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U user -d mydatabase"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    restart: always
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data

  # Backend API Service
  backend:
    build:
      context: ./apps/server
      dockerfile: Dockerfile
    restart: always
    environment:
      PORT: 4000
      DATABASE_URL: postgresql://user:password@db:5432/mydatabase
      REDIS_URL: redis://redis:6379
      # Add other environment variables as needed, e.g., JWT_SECRET
      JWT_SECRET: your_jwt_secret_here_for_docker
    ports:
      - "4000:4000"
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_started
    volumes:
      - ./apps/server:/app
      - /app/node_modules # Important to not mount node_modules from host

volumes:
  db-data:
  redis-data:
EOF

# Create Dockerfile for apps/server
cat << EOF > apps/server/Dockerfile
# Base image
FROM node:20-alpine AS base

# Install pnpm
RUN npm install -g pnpm

# Set working directory
WORKDIR /app

# Copy package.json and pnpm-lock.yaml to leverage Docker cache
COPY package.json pnpm-lock.yaml ./

# Install dependencies (only for local packages in the monorepo context)
# We will copy the entire monorepo context in a later stage for building
# For now, just ensure direct dependencies are fetched.
RUN pnpm fetch --prod

# Builder stage
FROM base AS builder

WORKDIR /app

# Copy the entire monorepo context
COPY . .

# Install all monorepo dependencies
RUN pnpm install --frozen-lockfile --ignore-scripts

# Build the backend application
RUN pnpm turbo run build --filter=backend...

# Production stage
FROM node:20-alpine AS runner

WORKDIR /app

# Copy compiled application from the builder stage
COPY --from=builder /app/apps/server/dist ./dist
COPY --from=builder /app/apps/server/node_modules ./node_modules
COPY --from=builder /app/apps/server/package.json ./package.json

# Copy packages which are built by turborepo and depended upon by backend
COPY --from=builder /app/packages/authbuilder/dist ./node_modules/@repo/authbuilder/dist
COPY --from=builder /app/packages/authbuilder/package.json ./node_modules/@repo/authbuilder/package.json

# If you had a shared config package, you might copy it too:
# COPY --from=builder /app/packages/config/dist ./node_modules/@repo/config/dist
# COPY --from=builder /app/packages/config/package.json ./node_modules/@repo/config/package.json


# Expose port
EXPOSE 4000

# Set environment variables
ENV NODE_ENV production

# Command to run the application
CMD [ "node", "dist/index.js" ]
EOF

echo_success "Docker and Docker Compose files created."

# --- Configure Turborepo `turbo.json` ---
echo_info "Configuring turbo.json for optimal build/dev experience..."
cat << EOF > turbo.json
{
  "$schema": "https://turbo.build/schema.json",
  "globalDependencies": [
    "**/.env",
    "**/.env.*local"
  ],
  "globalDotEnv": [
    ".env"
  ],
  "pipeline": {
    "build": {
      "dependsOn": ["^build"],
      "outputs": ["dist/**", ".next/**", "!.next/cache/**"]
    },
    "lint": {
      "dependsOn": ["^lint"]
    },
    "dev": {
      "cache": false,
      "persistent": true
    },
    "test": {
      "dependsOn": ["^build"],
      "outputs": ["coverage/**"],
      "inputs": ["src/**/*.ts", "src/**/*.tsx", "vitest.config.ts"]
    },
    "clean": {
      "cache": false
    },
    "type-check": {
      "outputs": []
    }
  }
}
EOF
echo_success "turbo.json configured."

# --- Install Root Dependencies and Run Initial Builds ---
echo_info "Installing all root pnpm dependencies. This might take a while..."
pnpm install
echo_success "Root dependencies installed."

echo_info "Running initial Turborepo build for all projects..."
pnpm turbo run build
echo_success "Initial build complete."

echo_info "Running initial Turborepo type-check for all projects..."
pnpm turbo run type-check
echo_success "Type checking complete."

# --- Final Instructions ---
echo_info "\n--- Setup Complete! ---"
echo_info "Your SaaS project boilerplate has been successfully set up in the '$PROJECT_NAME' directory."
echo_info "\nNext Steps:"
echo_info "1. Navigate into your project: cd $PROJECT_NAME"
echo_info "2. Review and update your .env.example files with actual credentials (e.g., in apps/server)."
echo_info "3. Start Docker services (PostgreSQL, Redis, Backend):"
echo_info "   docker compose up -d"
echo_info "4. Run Drizzle migrations to set up your database schema (from apps/server directory):"
echo_info "   cd apps/server"
echo_info "   pnpm drizzle-kit generate:pg"
echo_info "   pnpm drizzle-kit migrate"
echo_info "   cd ../.." # Go back to root
echo_info "5. Start the development servers:"
echo_info "   pnpm turbo run dev"
echo_info "   (This will run both Next.js frontend and Express backend concurrently)"
echo_info "6. Access your Next.js app at http://localhost:3000"
echo_info "7. Access your Express API at http://localhost:4000"
echo_info "8. To browse documentation: cd docs && pnpm run start (then open browser to port 3000 for docs)"
echo_info "9. Explore the generated files and customize them to fit your SaaS needs."
echo_success "Enjoy building your SaaS!"