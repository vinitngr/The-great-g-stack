
# Stack Overview for vinitnagarStackProject

## Project Type
- Monorepo (SAAS-level)
- Language: TypeScript
- Structure: apps/, packages/, turbo.json

---

## Stack Breakdown

### 1. TurboRepo (Monorepo)
- Used to manage apps and packages.
- CLI: `npx create-turbo@latest`
- Auto-creates folder structure, turbo.json

### 2. Next.js (Frontend)
- Created under apps/web
- CLI: `npx create-next-app@latest web --typescript ...`
- Features: ESM, App Router, TypeScript, no Tailwind, src directory enabled

### 3. Prisma (Database ORM)
- Setup in `packages/db`
- Installed: `prisma`, `@prisma/client`
- DB: Neon (PostgreSQL)
- CLI: `npx prisma init`, `npx prisma generate`, `npx prisma migrate`
- Schema contains: Project model with `id`, `name`, `createdAt`, `likes`

### 4. Redis
- Local installation expected (no Docker)
- Accessed via `ioredis` (ESM compatible)
- Install: `npm install ioredis`
- Usage: create a Redis client in packages/utils or services

### 5. Vercel (Deployment)
- Configuration file: `vercel.json` at root
- No build specified, placeholder added
- Deployment CLI:
  ```bash
  npm install -g vercel
  vercel login
  vercel --prod
  ```

---

## Important Notes

- Do not use Docker Compose as per user request.
- Redis must run locally and use `ioredis`.
- Ensure all packages use ESM modules.
- Prisma uses `DATABASE_URL` from `.env` file which should point to Neon.
- setup.sh avoids any destructive commands or insecure scripts.

---

## Final Tips

- Run `setup.sh` after cloning or initializing the repo.
- Update `.env` manually inside `packages/db`.
- Use Vercel CLI for seamless deployment of apps/web.
- Add proper Redis client in shared utils package as needed.
